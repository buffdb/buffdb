syntax = "proto3";

package kv;
import 'google/protobuf/any.proto';
import 'google/protobuf/wrappers.proto';

// The service definition for key-value operations.
service Kv {
  // Execute a query, returning the raw output.
  rpc Query(stream RawQuery) returns (stream QueryResult);

  // Execute a query, returning the number of rows changed, inserted, or deleted.
  rpc Execute(stream RawQuery) returns (stream RowsChanged);

  // Get a value for a given key.
  rpc Get(stream Key) returns (stream Value);

  // Set a value for a given key. If the key already exists, the value is updated.
  //
  // Returns the key for validation.
  rpc Set(stream KeyValue) returns (stream Key);

  // Delete a value for a given key.
  //
  // Returns the key for validation.
  rpc Delete(stream Key) returns (stream Key);

  // Determine if all provided keys have the same value.
  //
  // As the keys are streamed, the server returns `false` as soon as it finds two keys with
  // different values. If all keys have the same value, the server returns `true` when the stream
  // ends.
  //
  // Returns `false` if any key is not found.
  rpc Eq(stream Key) returns (google.protobuf.BoolValue);

  // Determine if all provided keys have different values.
  //
  // As the keys are streamed, the server returns `false` as soon as it finds two keys with
  // identical values. If all keys have different values, the server returns `true` when the stream
  // ends.
  //
  // Returns `false` if any key is not found.
  rpc NotEq(stream Key) returns (google.protobuf.BoolValue);
}

// A raw query.
message RawQuery {
  // The raw query to execute.
  string query = 1;
}

// The result of a raw query.
message QueryResult {
  // The raw output of the operation.
  repeated google.protobuf.Any fields = 1;
}

// The result of an execute operation.
message RowsChanged {
  // The number of rows changed, inserted, or deleted.
  uint64 rows_changed = 1;
}

// The key half of a key-value pair.
message Key {
  // The key half of the pair. Used as an index in the database. Keys are unique.
  string key = 1;
}

// The value half of a key-value pair.
message Value {
  // The value half of the pair, associated with a specific key. Values are not necessarily unique.
  string value = 1;
}

// A key-value pair.
message KeyValue {
  // The key half of the pair. Used as an index in the database. Keys are unique.
  string key = 1;
  // The value half of the pair, associated with a specific key. Values are not necessarily unique.
  string value = 2;
}
