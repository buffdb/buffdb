syntax = "proto3";

package blob;
import 'google/protobuf/any.proto';
import 'google/protobuf/wrappers.proto';

// Service definition for BLOB operations.
service Blob {
  // Execute a query, returning the raw output.
  rpc Query(stream RawQuery) returns (stream QueryResult);

  // Execute a query, returning the number of rows changed, inserted, or deleted.
  rpc Execute(stream RawQuery) returns (stream RowsChanged);

  // Retrieves a BLOB by its ID.
  rpc Get(stream BlobId) returns (stream BlobData);

  // Stores a new BLOB.
  //
  // Returns the ID for validation.
  rpc Store(stream BlobData) returns (stream BlobId);

  // Updates an existing BLOB.
  //
  // If the request is for updating only one of the data or metadata, the other field is not
  // changed.
  //
  // Returns the ID for validation.
  rpc Update(stream UpdateRequest) returns (stream BlobId);

  // Delete a BLOB and its metadata by its ID.
  //
  // Returns the ID for validation.
  rpc Delete(stream BlobId) returns (stream BlobId);

  // Determine if all provided BLOB IDs have the same data. Metadata is ignored.
  //
  // As the IDs are streamed, the server returns `false` as soon as it finds two IDs with different
  // data. If all IDs have the same data, the server returns `true` when the stream ends.
  //
  // Returns `false` if any ID is not found.
  rpc EqData(stream BlobId) returns (google.protobuf.BoolValue);

  // Determine if all provided BLOB IDs have different data.
  //
  // As the IDs are streamed, the server returns `false` as soon as it finds two IDs with identical
  // data. If all IDs have different data, the server returns `true` when the stream ends.
  //
  // Returns `false` if any ID is not found.
  rpc NotEqData(stream BlobId) returns (google.protobuf.BoolValue);
}

// A raw query.
message RawQuery {
  // The raw query to execute.
  string query = 1;
}

// The result of a raw query.
message QueryResult {
  // The raw output of the operation.
  repeated google.protobuf.Any fields = 1;
}

// The result of an execute operation.
message RowsChanged {
  // The number of rows changed, inserted, or deleted.
  uint64 rows_changed = 1;
}

// A unique identifier for a BLOB.
message BlobId {
  // The ID of a BLOB.
  uint64 id = 1;
}

// A BLOB and its optional metadata.
message BlobData {
  // The binary data of the BLOB.
  bytes bytes = 1;
  // Optional metadata as a JSON string or similar.
  optional string metadata = 2;
}

// Update message for updating a BLOB.
message UpdateRequest {
  // The ID of the BLOB to update.
  uint64 id = 1;
  // The updated binary data of the BLOB.
  optional bytes bytes = 2;
  // Whether to update the metadata.
  bool should_update_metadata = 3;
  // The updated metadata of the BLOB. Ignored if should_update_metadata is false.
  optional string metadata = 4;
}
