syntax = "proto3";

package blob;
import 'common.proto';

// Service definition for BLOB operations.
service Blob {
  // Retrieves a BLOB by its ID.
  rpc Get(BlobId) returns (BlobData);

  // Stores a new BLOB.
  rpc Store(BlobData) returns (BlobId);

  // Updates an existing BLOB.
  rpc Update(UpdateRequest) returns (BlobId);

  // Deletes a BLOB by its ID.
  rpc Delete(BlobId) returns (BlobId);

  // Determine if all provided BLOB IDs have the same data.
  rpc EqData(BlobIds) returns (common.Bool);

  // Determine if all provided BLOB IDs have different data.
  rpc NotEqData(BlobIds) returns (common.Bool);
}

// A unique identifier for a BLOB.
message BlobId {
  uint64 id = 1; // The ID of a BLOB.
}

// A list of unique identifiers for BLOBs.
message BlobIds {
  repeated uint64 ids = 1; // The IDs of BLOBs.
}

// A BLOB and its optional metadata.
message BlobData {
  bytes bytes = 1; // The binary data of the BLOB.
  optional string metadata = 2; // Optional metadata as a JSON string or similar.
}

// Update message for updating a BLOB.
message UpdateRequest {
  uint64 id = 1; // The ID of the BLOB to update.
  optional bytes bytes = 2; // The updated binary data of the BLOB.
  bool should_update_metadata = 3; // Whether to update the metadata.
  optional string metadata = 4; // The updated metadata of the BLOB. Ignored if should_update_metadata is false.
}
