syntax = "proto3";

package buffdb.blob;
import 'google/protobuf/any.proto';
import 'google/protobuf/wrappers.proto';

// Service definition for BLOB operations.
service Blob {
  // Retrieves a BLOB by its ID.
  rpc Get(stream GetRequest) returns (stream GetResponse);

  // Stores a new BLOB.
  //
  // Returns the ID for validation.
  rpc Store(stream StoreRequest) returns (stream StoreResponse);

  // Updates an existing BLOB.
  //
  // If the request is for updating only one of the data or metadata, the other field is not
  // changed.
  //
  // Returns the ID for validation.
  rpc Update(stream UpdateRequest) returns (stream UpdateResponse);

  // Delete a BLOB and its metadata by its ID.
  //
  // Returns the ID for validation.
  rpc Delete(stream DeleteRequest) returns (stream DeleteResponse);

  // Determine if all provided BLOB IDs have the same data. Metadata is ignored.
  //
  // As the IDs are streamed, the server returns `false` as soon as it finds two IDs with different
  // data. If all IDs have the same data, the server returns `true` when the stream ends.
  //
  // Returns `false` if any ID is not found.
  rpc EqData(stream EqDataRequest) returns (google.protobuf.BoolValue);

  // Determine if all provided BLOB IDs have different data.
  //
  // As the IDs are streamed, the server returns `false` as soon as it finds two IDs with identical
  // data. If all IDs have different data, the server returns `true` when the stream ends.
  //
  // Returns `false` if any ID is not found.
  rpc NotEqData(stream NotEqDataRequest) returns (google.protobuf.BoolValue);
}

// Request the data and metadata of a BLOB.
message GetRequest {
  // The ID of the BLOB to retrieve.
  uint64 id = 1;
}

// Response containing the data and metadata of a BLOB.
message GetResponse {
  // The binary data of the BLOB.
  bytes bytes = 1;
  // The metadata of the BLOB.
  optional string metadata = 2;
}

// Request to store a new BLOB.
message StoreRequest {
  // The binary data of the BLOB.
  bytes bytes = 1;
  // The metadata of the BLOB.
  optional string metadata = 2;
}

// Response containing the ID of the stored BLOB.
message StoreResponse {
  // The ID of the stored BLOB.
  uint64 id = 1;
}

// Request to update an existing BLOB.
message UpdateRequest {
  // The ID of the BLOB to update.
  uint64 id = 1;
  // The updated binary data of the BLOB.
  optional bytes bytes = 2;
  // Whether to update the metadata.
  bool should_update_metadata = 3;
  // The updated metadata of the BLOB. Ignored if should_update_metadata is false.
  optional string metadata = 4;
}

// Response containing the ID of the updated BLOB.
message UpdateResponse {
  // The ID of the updated BLOB.
  uint64 id = 1;
}

// Request to delete a BLOB.
message DeleteRequest {
  // The ID of the BLOB to delete.
  uint64 id = 1;
}

// Response containing the ID of the deleted BLOB.
message DeleteResponse {
  // The ID of the deleted BLOB.
  uint64 id = 1;
}

// Request to determine if all provided BLOB IDs have the same data.
message EqDataRequest {
  // The ID of the BLOB to compare.
  uint64 id = 1;
}

// Request to determine if all provided BLOB IDs have unique data.
message NotEqDataRequest {
  // The ID of the BLOB to compare.
  uint64 id = 1;
}
